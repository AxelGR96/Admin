export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  SessionNamespaces: any;
  SessionFieldsJSONInput: any;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};



export type Mutation = {
  __typename?: 'Mutation';
  updateSession?: Maybe<Session>;
};


export type MutationUpdateSessionArgs = {
  fields: Scalars['SessionFieldsJSONInput'];
  items?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Query = {
  __typename?: 'Query';
  session?: Maybe<Session>;
};


export type QuerySessionArgs = {
  items?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Session = SessionError | SessionSuccess;

export type SessionError = {
  __typename?: 'SessionError';
  type?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};



export type SessionSuccess = {
  __typename?: 'SessionSuccess';
  id: Scalars['String'];
  namespaces?: Maybe<Scalars['SessionNamespaces']>;
};


export {}