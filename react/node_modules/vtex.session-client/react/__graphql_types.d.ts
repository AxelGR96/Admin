export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Markdown: any;
  SessionNamespaces: any;
  SessionFieldsJSONInput: any;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};












export type IoCacheControlScope = 
  | 'SEGMENT'
  | 'PUBLIC'
  | 'PRIVATE';
















export type SessionQueryVariables = Exact<{
  items?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
}>;


export type SessionQuery = { __typename?: 'Query', session?: Maybe<{ __typename?: 'SessionError', type?: Maybe<string>, message?: Maybe<string> } | { __typename?: 'SessionSuccess', id: string, namespaces?: Maybe<any> }> };

export type UpdateSessionMutationVariables = Exact<{
  fields: Scalars['SessionFieldsJSONInput'];
  items?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
}>;


export type UpdateSessionMutation = { __typename?: 'Mutation', updateSession?: Maybe<{ __typename?: 'SessionError', type?: Maybe<string>, message?: Maybe<string> } | { __typename?: 'SessionSuccess', id: string, namespaces?: Maybe<any> }> };

export {}